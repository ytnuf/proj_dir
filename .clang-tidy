---
# Enable most of the things! Exceptions include:
# misc-non-private-member-variables-in-classes: the options don't do anything
# modernize-use-nodiscard: way too aggressive
Checks: "
    bugprone-argument-comment,
    bugprone-assert-side-effect,
    bugprone-bad-signal-to-kill-thread,
    bugprone-bool-pointer-implicit-conversion,
    bugprone-branch-clone,
    bugprone-copy-constructor-init,
    bugprone-dangling-handle,
    bugprone-dynamic-static-initializers,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    bugprone-inaccurate-erase,
    bugprone-incorrect-roundings,
    bugprone-infinite-loop,
    bugprone-integer-division,
    bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    bugprone-macro-repeated-side-effects,
    bugprone-misplaced-operator-in-strlen-in-alloc,
    bugprone-misplaced-pointer-arithmetic-in-alloc,
    bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    bugprone-multiple-statement-macro,
    bugprone-no-escape,
    bugprone-not-null-terminated-result,
    bugprone-posix-return,
    bugprone-redundant-branch-condition,
    bugprone-reserved-identifier,
    bugprone-signal-handler,
    bugprone-signed-char-misuse,
    bugprone-sizeof-expression,
    bugprone-spuriously-wake-up-functions,
    bugprone-string-constructor,
    bugprone-string-integer-assignment,
    bugprone-string-literal-with-embedded-nul,
    bugprone-suspicious-enum-usage,
    bugprone-suspicious-include,
    bugprone-suspicious-memset-usage,
    bugprone-suspicious-missing-comma,
    bugprone-suspicious-semicolon,
    bugprone-swapped-arguments,
    bugprone-terminating-continue,
    bugprone-throw-keyword-missing,
    bugprone-too-small-loop-variable,
    bugprone-undefined-memory-manipulation,
    bugprone-undelegated-constructor,
    bugprone-unhandled-self-assignment,
    bugprone-unused-raii,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    bugprone-virtual-near-miss,

    cppcoreguidelines-avoid-goto,
    cppcoreguidelines-interfaces-global-init,
    cppcoreguidelines-owning-memory,
    cppcoreguidelines-prefer-member-initializer,
    cppcoreguidelines-pro-type-member-init,
    cppcoreguidelines-pro-type-vararg,
    cppcoreguidelines-slicing,

    google-build-namespaces,
    google-default-arguments,
    google-global-names-in-headers,
    google-readability-casting,
    google-runtime-operator,

    hicpp-exception-baseclass,

    llvm-include-order,
    llvm-namespace-comment,

    misc-definitions-in-headers,
    misc-misplaced-const,
    misc-redundant-expression,
    misc-throw-by-value-catch-by-reference,
    misc-unconventional-assign-operator,
    misc-uniqueptr-reset-release,
    misc-unused-alias-decls,
    misc-unused-parameters,

    modernize-avoid-c-arrays,
    modernize-concat-nested-namespaces,
    modernize-deprecated-ios-base-aliases,
    modernize-loop-convert,
    modernize-make-shared,
    modernize-make-unique,
    modernize-pass-by-value,
    modernize-shrink-to-fit,
    modernize-use-bool-literals,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    modernize-use-nodiscard,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    modernize-use-uncaught-exceptions,

    performance-faster-string-find,
    performance-for-range-copy,
    performance-implicit-conversion-in-loop,
    performance-inefficient-algorithm,
    performance-inefficient-string-concatenation,
    performance-inefficient-vector-operation,
    performance-move-const-arg,
    performance-move-constructor-init,
    performance-no-automatic-move,
    performance-no-int-to-ptr,
    performance-noexcept-move-constructor,
    performance-trivially-destructible,
    performance-type-promotion-in-math-fn,
    performance-unnecessary-copy-initialization,
    performance-unnecessary-value-param,

    readability-container-size-empty,
    readability-convert-member-functions-to-static,
    readability-delete-null-pointer,
    readability-deleted-default,
    readability-identifier-naming,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    readability-make-member-function-const,
    readability-misleading-indentation,
    readability-misplaced-array-index,
    readability-non-const-parameter,
    readability-redundant-access-specifiers,
    readability-redundant-declaration,
    readability-redundant-preprocessor,
    readability-redundant-smartptr-get,
    readability-redundant-string-cstr,
    readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-string-compare,
    readability-uniqueptr-delete-release,
    readability-use-anyofallof,
"

WarningsAsErrors: ''
CheckOptions:
    -   key: 'bugprone-argument-comment.StrictMode'
        value: 'true'
    -   key: 'bugprone-argument-comment.CommentBoolLiterals'
        value: 'true'
    -   key: 'bugprone-misplaced-widening-cast.CheckImplicitCasts'
        value: 'true'
    -   key: 'bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression'
        value: 'true'
    -   key: 'bugprone-suspicious-string-compare.WarnOnLogicalNotComparison'
        value: 'true'
    -   key: 'readability-simplify-boolean-expr.ChainedConditionalReturn'
        value: 'true'
    -   key: 'readability-simplify-boolean-expr.ChainedConditionalAssignment'
        value: 'true'
    -   key: 'readability-uniqueptr-delete-release.PreferResetCall'
        value: 'true'
    -   key: 'cppcoreguidelines-init-variables.MathHeader'
        value: '<cmath>'
    -   key: 'readability-else-after-return.WarnOnUnfixable'
        value: 'true'
    -   key: 'readability-else-after-return.WarnOnConditionVariables'
        value: 'true'
    -   key: 'readability-inconsistent-declaration-parameter-name.Strict'
        value: 'true'
    -   key: 'readability-qualified-auto.AddConstToQualified'
        value: 'true'
    -   key: 'readability-redundant-access-specifiers.CheckFirstDeclaration'
        value: 'true'

    -   key: 'readability-identifier-naming.AbstractClassCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.ClassCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.EnumCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.GlobalConstantPrefix'
        value: ''
    -   key: 'readability-identifier-naming.GlobalFunctionPrefix'
        value: ''
    -   key: 'readability-identifier-naming.GlobalPointerPrefix'
        value: 's_'
    -   key: 'readability-identifier-naming.GlobalVariablePrefix'
        value: 's_'
    -   key: 'readability-identifier-naming.MacroDefinitionCase'
        value: 'UPPER_CASE'
    -   key: 'readability-identifier-naming.PrivateMemberPrefix'
        value: 'm_'
    -   key: 'readability-identifier-naming.ProtectedMemberPrefix'
        value: 'm_'
    -   key: 'readability-identifier-naming.StaticConstantPrefix'
        value: ''
    -   key: 'readability-identifier-naming.StaticFunctionPrefix'
        value: ''
    -   key: 'readability-identifier-naming.StaticPointerPrefix'
        value: 's_'
    -   key: 'readability-identifier-naming.StaticVariablePrefix'
        value: 's_'
    -   key: 'readability-identifier-naming.StructCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.TemplateParameterCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.TemplateTemplateParameterCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.TypeAliasCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.TypedefCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.TypeTemplateParameterCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.UnionCase'
        value: 'CamelCase'
    -   key: 'readability-identifier-naming.ValueTemplateParameterCase'
        value: 'CamelCase'
...
